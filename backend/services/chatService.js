import db from "../models/index.js"

export class ChatService {
  // T√¨m ho·∫∑c t·∫°o phi√™n chat gi·ªØa kh√°ch h√†ng v√† nh√¢n vi√™n
  static async findOrCreateChatSession(clientId, employeeId, clientName = null) {
    try {
      console.log(`üîπ Finding or creating chat session for client: ${clientId}, employee: ${employeeId}`)

      // T√¨m ho·∫∑c t·∫°o kh√°ch h√†ng
      let khachHang = await db.KhachHang.findOne({
        where: { MaKH: clientId },
      })

      if (!khachHang) {
        console.log(`üîπ Creating new customer: ${clientId}`)
        khachHang = await db.KhachHang.create({
          MaKH: clientId,
          HoTen: clientName || `Kh√°ch_${clientId}`,
          Email: null,
          SoDienThoai: null,
        })
      }

      let phienChat = await db.PhienChat.findOne({
        where: {
          MaKH: khachHang.MaKH,
          MaNV: employeeId,
        },
      })

      if (phienChat) {
        console.log(`üîπ Found existing chat session: ${phienChat.MaPhienChat}, updating status`)
        phienChat.TrangThai = "DangHoatDong"
        phienChat.ThoiGianBatDau = new Date()
        await phienChat.save()
      } else {
        console.log(`üîπ Creating new chat session`)
        phienChat = await db.PhienChat.create({
          MaKH: khachHang.MaKH,
          MaNV: employeeId,
          ThoiGianBatDau: new Date(),
          ThoiGianKetThuc: null,
          TrangThai: "DangHoatDong",
        })
      }

      console.log(`‚úÖ Chat session ready: ${phienChat.MaPhienChat}`)
      return phienChat
    } catch (error) {
      console.error("‚ùå L·ªói t√¨m/t·∫°o phi√™n chat:", error)
      throw error
    }
  }

  // L∆∞u tin nh·∫Øn
  static async saveMessage(chatSessionId, message, nguoiGui, senderId = null) {
    try {
      console.log(`üîπ Saving message for chat ${chatSessionId}, from: ${nguoiGui}`)

      const tinNhan = await db.TinNhan.create({
        MaPhienChat: chatSessionId,
        NoiDung: message,
        ThoiGianGui: new Date(),
        NguoiGui: nguoiGui, // 'KhachHang', 'NhanVien', ho·∫∑c 'HeThong'
      })

      console.log(`‚úÖ Message saved: ${tinNhan.MaTinNhan}`)
      return tinNhan
    } catch (error) {
      console.error("‚ùå L·ªói l∆∞u tin nh·∫Øn:", error)
      throw error
    }
  }

  // L·∫•y l·ªãch s·ª≠ chat
  static async getChatHistory(chatSessionId) {
    try {
      console.log(`üîπ Getting chat history for: ${chatSessionId}`)

      const messages = await db.TinNhan.findAll({
        where: { MaPhienChat: chatSessionId },
        order: [["ThoiGianGui", "ASC"]],
      })

      console.log(`‚úÖ Found ${messages.length} messages`)
      return messages
    } catch (error) {
      console.error("‚ùå L·ªói l·∫•y l·ªãch s·ª≠ chat:", error)
      throw error
    }
  }

  // K·∫øt th√∫c phi√™n chat
  static async endChatSession(chatSessionId, employeeId = null) {
    try {
      console.log(`üîπ Ending chat session: ${chatSessionId}`)

      const phienChat = await db.PhienChat.findByPk(chatSessionId)
      if (phienChat) {
        phienChat.TrangThai = "DaKetThuc"
        phienChat.ThoiGianKetThuc = new Date()
        await phienChat.save()

        if (employeeId) {
          await db.NhatKyXuLy.create({
            MaNV: employeeId,
            MaPhienChat: chatSessionId,
            HanhDong: "end_chat",
            GhiChu: "K·∫øt th√∫c phi√™n chat",
            ThoiGian: new Date(),
          })
        }

        console.log(`‚úÖ Chat session ended`)
      }
      return phienChat
    } catch (error) {
      console.error("‚ùå L·ªói k·∫øt th√∫c chat:", error)
      throw error
    }
  }

  // T·∫°m d·ª´ng phi√™n chat (chuy·ªÉn sang DangCho)
  static async pauseChatSession(chatSessionId) {
    try {
      console.log(`üîπ Pausing chat session: ${chatSessionId}`)

      const phienChat = await db.PhienChat.findByPk(chatSessionId)
      if (phienChat) {
        phienChat.TrangThai = "DangCho"
        await phienChat.save()
        console.log(`‚úÖ Chat session paused, status changed to DangCho`)
      }
      return phienChat
    } catch (error) {
      console.error("‚ùå L·ªói t·∫°m d·ª´ng chat:", error)
      throw error
    }
  }
}

export default ChatService
